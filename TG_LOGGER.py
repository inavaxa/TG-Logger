# -----------------------------------------------------------------------------
# TG_LOGGER.py
# –ü–∞—Å—Ö–∞–ª–∫–∞: –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω 1nava. –£–¥–∞—á–Ω–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è! :)
# -----------------------------------------------------------------------------

import logging
from telethon import TelegramClient, events
import asyncio
from telethon.tl.types import (UserStatusOnline, UserStatusOffline, UserStatusRecently, UserStatusLastMonth, UserStatusLastWeek)
from telethon import functions

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='account_activity.log', level=logging.INFO, format='%(asctime)s - %(message)s')

api_id = '–≤–∞—à –∞–π–¥–∏'
api_hash = '–≤–∞—à —Ö–µ—à'
phone = '–≤–∞—à –Ω–æ–º–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞'

client = TelegramClient('anon', api_id, api_hash)

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
group_logger = logging.getLogger('group_logger')
group_handler = logging.FileHandler('group_messages.log', encoding='utf-8')
group_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
group_logger.addHandler(group_handler)
group_logger.setLevel(logging.INFO)

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
private_logger = logging.getLogger('private_logger')
private_handler = logging.FileHandler('private_messages.log', encoding='utf-8')
private_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
private_logger.addHandler(private_handler)
private_logger.setLevel(logging.INFO)

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
status_logger = logging.getLogger('status_logger')
status_handler = logging.FileHandler('status_events.log', encoding='utf-8')
status_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
status_logger.addHandler(status_handler)
status_logger.setLevel(logging.INFO)

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
account_logger = logging.getLogger('account_logger')
account_handler = logging.FileHandler('account_events.log', encoding='utf-8')
account_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
account_logger.addHandler(account_handler)
account_logger.setLevel(logging.INFO)

# –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def log_event(event_type, details):
    logging.info(f'{event_type}: {details}')

@client.on(events.NewMessage(incoming=True))
async def log_incoming(event):
    chat = await event.get_chat()
    sender = await event.get_sender()
    sender_name = sender.username if sender and sender.username else f'User {event.sender_id}'
    if hasattr(chat, 'title'):
        chat_type = '–ì—Ä—É–ø–ø–∞'
        chat_name = chat.title
        group_logger.info(f'–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ "{chat_name}" –æ—Ç {sender_name}: {event.text}')
    else:
        chat_type = '–õ–∏—á–Ω–æ–µ'
        chat_name = sender_name
        private_logger.info(f'–í—Ö–æ–¥—è—â–µ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}: {event.text}')
    log_event(f'–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({chat_type})', f'–æ—Ç {sender_name} –≤ "{chat_name}": {event.text}')

@client.on(events.NewMessage(outgoing=True))
async def log_outgoing(event):
    chat = await event.get_chat()
    recipient = None
    if hasattr(chat, 'title'):
        chat_type = '–ì—Ä—É–ø–ø–∞'
        chat_name = chat.title
        group_logger.info(f'–ò—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ "{chat_name}": {event.text}')
        recipient = chat_name
    else:
        chat_type = '–õ–∏—á–Ω–æ–µ'
        # –î–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å ‚Äî —ç—Ç–æ chat (User)
        if hasattr(chat, 'username') and chat.username:
            recipient = chat.username
        elif hasattr(chat, 'first_name') and chat.first_name:
            recipient = chat.first_name
        else:
            recipient = f'User {event.chat_id}'
        chat_name = recipient
        private_logger.info(f'–ò—Å—Ö–æ–¥—è—â–µ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {recipient}: {event.text}')
    log_event(f'–ò—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({chat_type})', f'–¥–ª—è {recipient}: {event.text}')

@client.on(events.ChatAction())
async def handler(event):
    if event.user_joined or event.user_added:
        log_event('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.user_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É {event.chat_id}')
    elif event.user_left or event.user_kicked:
        log_event('–ü–æ–∫–∏–Ω—É–ª —á–∞—Ç', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.user_id} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç {event.chat_id}')

@client.on(events.Raw())
async def raw_handler(event):
    log_event('Raw event', str(event))

@client.on(events.UserUpdate())
async def user_update_handler(event):
    if hasattr(event, 'status'):
        status = event.status
        user_id = event.user_id
        # –ü–æ–ª—É—á–∞–µ–º id —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        me = await client.get_me()
        if user_id != me.id:
            return  # –õ–æ–≥–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç
        try:
            user = await client.get_entity(user_id)
            username = user.username if hasattr(user, 'username') and user.username else f'User {user_id}'
        except Exception:
            username = f'User {user_id}'
        if isinstance(status, UserStatusOnline):
            from datetime import datetime
            now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            try:
                sessions = await client(functions.account.GetAuthorizationsRequest())
                session_info = None
                is_bot = False
                for s in sessions.authorizations:
                    if s.current:
                        device = s.device_model or 'Unknown device'
                        platform = s.platform or 'Unknown platform'
                        app = s.app_name or 'Unknown app'
                        ip = s.ip or 'Unknown IP'
                        session_info = f'{device}, {platform}, {app}, IP: {ip}'
                        if 'bot' in app.lower():
                            is_bot = True
                        break
                bot_status = ' (–±–æ—Ç)' if is_bot else ''
                if session_info:
                    status_logger.info(f'–í—Ö–æ–¥ –≤ —Å–µ—Ç—å: {username} –≤ {now} —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {session_info}{bot_status}')
                    log_event('–í—Ö–æ–¥ –≤ —Å–µ—Ç—å', f'{username} –≤ {now} —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {session_info}{bot_status}')
                else:
                    status_logger.info(f'–í—Ö–æ–¥ –≤ —Å–µ—Ç—å: {username} –≤ {now}{bot_status}')
                    log_event('–í—Ö–æ–¥ –≤ —Å–µ—Ç—å', f'{username} –≤ {now}{bot_status}')
            except Exception as e:
                status_logger.info(f'–í—Ö–æ–¥ –≤ —Å–µ—Ç—å: {username} –≤ {now} (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e})')
                log_event('–í—Ö–æ–¥ –≤ —Å–µ—Ç—å', f'{username} –≤ {now} (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e})')
        elif isinstance(status, UserStatusOffline):
            status_logger.info(f'–í—ã—Ö–æ–¥ –∏–∑ —Å–µ—Ç–∏: {username}. –ë—ã–ª –≤ —Å–µ—Ç–∏: {status.was_online}')
            log_event('–í—ã—Ö–æ–¥ –∏–∑ —Å–µ—Ç–∏', f'{username}. –ë—ã–ª –≤ —Å–µ—Ç–∏: {status.was_online}')

async def log_own_status():
    while True:
        me = await client.get_me()
        if hasattr(me, 'status'):
            status = me.status
            if isinstance(status, UserStatusOnline):
                log_event('–°—Ç–∞—Ç—É—Å', '–í —Å–µ—Ç–∏')
            elif isinstance(status, UserStatusOffline):
                log_event('–°—Ç–∞—Ç—É—Å', f'–ë—ã–ª –≤ —Å–µ—Ç–∏: {status.was_online}')
            elif isinstance(status, UserStatusRecently):
                log_event('–°—Ç–∞—Ç—É—Å', '–ë—ã–ª –≤ —Å–µ—Ç–∏ –Ω–µ–¥–∞–≤–Ω–æ')
            elif isinstance(status, UserStatusLastWeek):
                log_event('–°—Ç–∞—Ç—É—Å', '–ë—ã–ª –≤ —Å–µ—Ç–∏ –Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ')
            elif isinstance(status, UserStatusLastMonth):
                log_event('–°—Ç–∞—Ç—É—Å', '–ë—ã–ª –≤ —Å–µ—Ç–∏ –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ')
            else:
                log_event('–°—Ç–∞—Ç—É—Å', str(status))
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def main():
    print("üê∞ –ü–∞—Å—Ö–∞–ª–∫–∞: –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∞–ø–∏—Å–∞–ª 1nava. –£–¥–∞—á–Ω–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è!")
    await client.start(phone=phone)
    me = await client.get_me()
    username = me.username if me and me.username else f'User {me.id}'
    account_logger.info(f'–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç: {username}')
    log_event('–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç', f'{username}')
    print('–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C')
    try:
        await asyncio.gather(
            log_own_status(),
            client.run_until_disconnected()
        )
    finally:
        account_logger.info('–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
        log_event('–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', '–¢–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç')

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
